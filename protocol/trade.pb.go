// Code generated by protoc-gen-go.
// source: trade.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 合约资金信息
type PBFContractMoneyInfo struct {
	ContractType     []byte   `protobuf:"bytes,1,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	Freeze           *float32 `protobuf:"fixed32,2,opt,name=freeze" json:"freeze,omitempty"`
	Balance          *float32 `protobuf:"fixed32,3,opt,name=balance" json:"balance,omitempty"`
	ContractId       []byte   `protobuf:"bytes,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	Available        *float32 `protobuf:"fixed32,5,opt,name=available" json:"available,omitempty"`
	Profit           *float32 `protobuf:"fixed32,6,opt,name=profit" json:"profit,omitempty"`
	Unprofit         *float32 `protobuf:"fixed32,7,opt,name=unprofit" json:"unprofit,omitempty"`
	Bond             *float32 `protobuf:"fixed32,8,opt,name=bond" json:"bond,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFContractMoneyInfo) Reset()                    { *m = PBFContractMoneyInfo{} }
func (m *PBFContractMoneyInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFContractMoneyInfo) ProtoMessage()               {}
func (*PBFContractMoneyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PBFContractMoneyInfo) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFContractMoneyInfo) GetFreeze() float32 {
	if m != nil && m.Freeze != nil {
		return *m.Freeze
	}
	return 0
}

func (m *PBFContractMoneyInfo) GetBalance() float32 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *PBFContractMoneyInfo) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *PBFContractMoneyInfo) GetAvailable() float32 {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return 0
}

func (m *PBFContractMoneyInfo) GetProfit() float32 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *PBFContractMoneyInfo) GetUnprofit() float32 {
	if m != nil && m.Unprofit != nil {
		return *m.Unprofit
	}
	return 0
}

func (m *PBFContractMoneyInfo) GetBond() float32 {
	if m != nil && m.Bond != nil {
		return *m.Bond
	}
	return 0
}

// 单个品种的资金信息，比如btc_usd
type PBFMoneyInfo struct {
	Symbol           []byte                  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Balance          *float32                `protobuf:"fixed32,2,opt,name=balance" json:"balance,omitempty"`
	Rights           *float32                `protobuf:"fixed32,3,opt,name=rights" json:"rights,omitempty"`
	Contracts        []*PBFContractMoneyInfo `protobuf:"bytes,4,rep,name=contracts" json:"contracts,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PBFMoneyInfo) Reset()                    { *m = PBFMoneyInfo{} }
func (m *PBFMoneyInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFMoneyInfo) ProtoMessage()               {}
func (*PBFMoneyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PBFMoneyInfo) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFMoneyInfo) GetBalance() float32 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *PBFMoneyInfo) GetRights() float32 {
	if m != nil && m.Rights != nil {
		return *m.Rights
	}
	return 0
}

func (m *PBFMoneyInfo) GetContracts() []*PBFContractMoneyInfo {
	if m != nil {
		return m.Contracts
	}
	return nil
}

// 合约头寸信息
// 头寸是按照某一品种的某一合约类型来划分，比如btc_usd下的this_week合约
type PBFContractPosInfo struct {
	BuyAmount           *float32 `protobuf:"fixed32,1,opt,name=buy_amount,json=buyAmount" json:"buy_amount,omitempty"`
	BuyAvailable        *float32 `protobuf:"fixed32,2,opt,name=buy_available,json=buyAvailable" json:"buy_available,omitempty"`
	BuyBond             *float32 `protobuf:"fixed32,3,opt,name=buy_bond,json=buyBond" json:"buy_bond,omitempty"`
	BuyFlatprice        *float32 `protobuf:"fixed32,4,opt,name=buy_flatprice,json=buyFlatprice" json:"buy_flatprice,omitempty"`
	BuyProfitLossratio  *float32 `protobuf:"fixed32,5,opt,name=buy_profit_lossratio,json=buyProfitLossratio" json:"buy_profit_lossratio,omitempty"`
	BuyPriceAvg         *float32 `protobuf:"fixed32,6,opt,name=buy_price_avg,json=buyPriceAvg" json:"buy_price_avg,omitempty"`
	BuyPriceCost        *float32 `protobuf:"fixed32,7,opt,name=buy_price_cost,json=buyPriceCost" json:"buy_price_cost,omitempty"`
	BuyProfitReal       *float32 `protobuf:"fixed32,8,opt,name=buy_profit_real,json=buyProfitReal" json:"buy_profit_real,omitempty"`
	ContractId          []byte   `protobuf:"bytes,9,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	ContractType        []byte   `protobuf:"bytes,10,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	CreateDate          []byte   `protobuf:"bytes,11,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	SellAmount          *float32 `protobuf:"fixed32,12,opt,name=sell_amount,json=sellAmount" json:"sell_amount,omitempty"`
	SellAvailable       *float32 `protobuf:"fixed32,13,opt,name=sell_available,json=sellAvailable" json:"sell_available,omitempty"`
	SellBond            *float32 `protobuf:"fixed32,14,opt,name=sell_bond,json=sellBond" json:"sell_bond,omitempty"`
	SellFlatprice       *float32 `protobuf:"fixed32,15,opt,name=sell_flatprice,json=sellFlatprice" json:"sell_flatprice,omitempty"`
	SellProfitLossratio *float32 `protobuf:"fixed32,16,opt,name=sell_profit_lossratio,json=sellProfitLossratio" json:"sell_profit_lossratio,omitempty"`
	SellPriceAvg        *float32 `protobuf:"fixed32,17,opt,name=sell_price_avg,json=sellPriceAvg" json:"sell_price_avg,omitempty"`
	SellPriceCost       *float32 `protobuf:"fixed32,18,opt,name=sell_price_cost,json=sellPriceCost" json:"sell_price_cost,omitempty"`
	SellProfitReal      *float32 `protobuf:"fixed32,19,opt,name=sell_profit_real,json=sellProfitReal" json:"sell_profit_real,omitempty"`
	Symbol              []byte   `protobuf:"bytes,20,opt,name=symbol" json:"symbol,omitempty"`
	LeverRate           *int32   `protobuf:"varint,21,opt,name=lever_rate,json=leverRate" json:"lever_rate,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *PBFContractPosInfo) Reset()                    { *m = PBFContractPosInfo{} }
func (m *PBFContractPosInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFContractPosInfo) ProtoMessage()               {}
func (*PBFContractPosInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PBFContractPosInfo) GetBuyAmount() float32 {
	if m != nil && m.BuyAmount != nil {
		return *m.BuyAmount
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyAvailable() float32 {
	if m != nil && m.BuyAvailable != nil {
		return *m.BuyAvailable
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyBond() float32 {
	if m != nil && m.BuyBond != nil {
		return *m.BuyBond
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyFlatprice() float32 {
	if m != nil && m.BuyFlatprice != nil {
		return *m.BuyFlatprice
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyProfitLossratio() float32 {
	if m != nil && m.BuyProfitLossratio != nil {
		return *m.BuyProfitLossratio
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyPriceAvg() float32 {
	if m != nil && m.BuyPriceAvg != nil {
		return *m.BuyPriceAvg
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyPriceCost() float32 {
	if m != nil && m.BuyPriceCost != nil {
		return *m.BuyPriceCost
	}
	return 0
}

func (m *PBFContractPosInfo) GetBuyProfitReal() float32 {
	if m != nil && m.BuyProfitReal != nil {
		return *m.BuyProfitReal
	}
	return 0
}

func (m *PBFContractPosInfo) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *PBFContractPosInfo) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFContractPosInfo) GetCreateDate() []byte {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *PBFContractPosInfo) GetSellAmount() float32 {
	if m != nil && m.SellAmount != nil {
		return *m.SellAmount
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellAvailable() float32 {
	if m != nil && m.SellAvailable != nil {
		return *m.SellAvailable
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellBond() float32 {
	if m != nil && m.SellBond != nil {
		return *m.SellBond
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellFlatprice() float32 {
	if m != nil && m.SellFlatprice != nil {
		return *m.SellFlatprice
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellProfitLossratio() float32 {
	if m != nil && m.SellProfitLossratio != nil {
		return *m.SellProfitLossratio
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellPriceAvg() float32 {
	if m != nil && m.SellPriceAvg != nil {
		return *m.SellPriceAvg
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellPriceCost() float32 {
	if m != nil && m.SellPriceCost != nil {
		return *m.SellPriceCost
	}
	return 0
}

func (m *PBFContractPosInfo) GetSellProfitReal() float32 {
	if m != nil && m.SellProfitReal != nil {
		return *m.SellProfitReal
	}
	return 0
}

func (m *PBFContractPosInfo) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFContractPosInfo) GetLeverRate() int32 {
	if m != nil && m.LeverRate != nil {
		return *m.LeverRate
	}
	return 0
}

// 订单信息
type PBFOrderInfo struct {
	Amount           *float32 `protobuf:"fixed32,1,opt,name=amount" json:"amount,omitempty"`
	ContractName     []byte   `protobuf:"bytes,2,opt,name=contract_name,json=contractName" json:"contract_name,omitempty"`
	ContractDate     []byte   `protobuf:"bytes,3,opt,name=contract_date,json=contractDate" json:"contract_date,omitempty"`
	DealAmount       *float32 `protobuf:"fixed32,4,opt,name=deal_amount,json=dealAmount" json:"deal_amount,omitempty"`
	Fee              *float32 `protobuf:"fixed32,5,opt,name=fee" json:"fee,omitempty"`
	OrderId          []byte   `protobuf:"bytes,6,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Price            *float32 `protobuf:"fixed32,7,opt,name=price" json:"price,omitempty"`
	PriceAvg         *float32 `protobuf:"fixed32,8,opt,name=price_avg,json=priceAvg" json:"price_avg,omitempty"`
	Status           *int32   `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	Symbol           []byte   `protobuf:"bytes,10,opt,name=symbol" json:"symbol,omitempty"`
	Type             *int32   `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
	UnitAmount       *float32 `protobuf:"fixed32,12,opt,name=unit_amount,json=unitAmount" json:"unit_amount,omitempty"`
	LeverRate        *int32   `protobuf:"varint,13,opt,name=lever_rate,json=leverRate" json:"lever_rate,omitempty"`
	ContractType     []byte   `protobuf:"bytes,14,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFOrderInfo) Reset()                    { *m = PBFOrderInfo{} }
func (m *PBFOrderInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFOrderInfo) ProtoMessage()               {}
func (*PBFOrderInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PBFOrderInfo) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *PBFOrderInfo) GetContractName() []byte {
	if m != nil {
		return m.ContractName
	}
	return nil
}

func (m *PBFOrderInfo) GetContractDate() []byte {
	if m != nil {
		return m.ContractDate
	}
	return nil
}

func (m *PBFOrderInfo) GetDealAmount() float32 {
	if m != nil && m.DealAmount != nil {
		return *m.DealAmount
	}
	return 0
}

func (m *PBFOrderInfo) GetFee() float32 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

func (m *PBFOrderInfo) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *PBFOrderInfo) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *PBFOrderInfo) GetPriceAvg() float32 {
	if m != nil && m.PriceAvg != nil {
		return *m.PriceAvg
	}
	return 0
}

func (m *PBFOrderInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PBFOrderInfo) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFOrderInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PBFOrderInfo) GetUnitAmount() float32 {
	if m != nil && m.UnitAmount != nil {
		return *m.UnitAmount
	}
	return 0
}

func (m *PBFOrderInfo) GetLeverRate() int32 {
	if m != nil && m.LeverRate != nil {
		return *m.LeverRate
	}
	return 0
}

func (m *PBFOrderInfo) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

type RspInfo struct {
	ErrorId          *int32 `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg         []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RspInfo) Reset()                    { *m = RspInfo{} }
func (m *RspInfo) String() string            { return proto.CompactTextString(m) }
func (*RspInfo) ProtoMessage()               {}
func (*RspInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RspInfo) GetErrorId() int32 {
	if m != nil && m.ErrorId != nil {
		return *m.ErrorId
	}
	return 0
}

func (m *RspInfo) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

// 查询资金信息请求
type PBFReqQryMoneyInfo struct {
	Exchange         []byte `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PBFReqQryMoneyInfo) Reset()                    { *m = PBFReqQryMoneyInfo{} }
func (m *PBFReqQryMoneyInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFReqQryMoneyInfo) ProtoMessage()               {}
func (*PBFReqQryMoneyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *PBFReqQryMoneyInfo) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

// 查询资金信息回应
type PBFRspQryMoneyInfo struct {
	Rsp              *RspInfo        `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	MoneyInfos       []*PBFMoneyInfo `protobuf:"bytes,2,rep,name=money_infos,json=moneyInfos" json:"money_infos,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PBFRspQryMoneyInfo) Reset()                    { *m = PBFRspQryMoneyInfo{} }
func (m *PBFRspQryMoneyInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFRspQryMoneyInfo) ProtoMessage()               {}
func (*PBFRspQryMoneyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *PBFRspQryMoneyInfo) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *PBFRspQryMoneyInfo) GetMoneyInfos() []*PBFMoneyInfo {
	if m != nil {
		return m.MoneyInfos
	}
	return nil
}

// 查询头寸请求, 一次只查询一个商品的头寸
type PBFReqQryPosInfo struct {
	Exchange         []byte `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte `protobuf:"bytes,3,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PBFReqQryPosInfo) Reset()                    { *m = PBFReqQryPosInfo{} }
func (m *PBFReqQryPosInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFReqQryPosInfo) ProtoMessage()               {}
func (*PBFReqQryPosInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *PBFReqQryPosInfo) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFReqQryPosInfo) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFReqQryPosInfo) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

// 查询头寸回应
type PBFRspQryPosInfo struct {
	Rsp              *RspInfo              `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	Exchange         []byte                `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte                `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte                `protobuf:"bytes,4,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	PosInfos         []*PBFContractPosInfo `protobuf:"bytes,5,rep,name=pos_infos,json=posInfos" json:"pos_infos,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PBFRspQryPosInfo) Reset()                    { *m = PBFRspQryPosInfo{} }
func (m *PBFRspQryPosInfo) String() string            { return proto.CompactTextString(m) }
func (*PBFRspQryPosInfo) ProtoMessage()               {}
func (*PBFRspQryPosInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *PBFRspQryPosInfo) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *PBFRspQryPosInfo) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFRspQryPosInfo) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFRspQryPosInfo) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFRspQryPosInfo) GetPosInfos() []*PBFContractPosInfo {
	if m != nil {
		return m.PosInfos
	}
	return nil
}

// 下单请求
type PBFReqSetOrder struct {
	Exchange         []byte   `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte   `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte   `protobuf:"bytes,3,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	Price            *float32 `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Amount           *int32   `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	OrderType        *int32   `protobuf:"varint,6,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	PriceSt          *int32   `protobuf:"varint,7,opt,name=price_st,json=priceSt" json:"price_st,omitempty"`
	Level            *int32   `protobuf:"varint,8,opt,name=level" json:"level,omitempty"`
	Vol              *float32 `protobuf:"fixed32,9,opt,name=vol" json:"vol,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFReqSetOrder) Reset()                    { *m = PBFReqSetOrder{} }
func (m *PBFReqSetOrder) String() string            { return proto.CompactTextString(m) }
func (*PBFReqSetOrder) ProtoMessage()               {}
func (*PBFReqSetOrder) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *PBFReqSetOrder) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFReqSetOrder) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFReqSetOrder) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFReqSetOrder) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *PBFReqSetOrder) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *PBFReqSetOrder) GetOrderType() int32 {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return 0
}

func (m *PBFReqSetOrder) GetPriceSt() int32 {
	if m != nil && m.PriceSt != nil {
		return *m.PriceSt
	}
	return 0
}

func (m *PBFReqSetOrder) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *PBFReqSetOrder) GetVol() float32 {
	if m != nil && m.Vol != nil {
		return *m.Vol
	}
	return 0
}

// 下单回应
type PBFRspSetOrder struct {
	Rsp              *RspInfo `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	Exchange         []byte   `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte   `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte   `protobuf:"bytes,4,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	OrderId          []byte   `protobuf:"bytes,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFRspSetOrder) Reset()                    { *m = PBFRspSetOrder{} }
func (m *PBFRspSetOrder) String() string            { return proto.CompactTextString(m) }
func (*PBFRspSetOrder) ProtoMessage()               {}
func (*PBFRspSetOrder) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *PBFRspSetOrder) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *PBFRspSetOrder) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFRspSetOrder) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFRspSetOrder) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFRspSetOrder) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

// 批量查询单据请求
type PBFReqQryOrders struct {
	Exchange         []byte `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte `protobuf:"bytes,3,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	OrderId          []byte `protobuf:"bytes,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	OrderStatus      *int32 `protobuf:"varint,5,opt,name=order_status,json=orderStatus" json:"order_status,omitempty"`
	CurrentPage      *int32 `protobuf:"varint,6,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	PageLength       *int32 `protobuf:"varint,7,opt,name=page_length,json=pageLength" json:"page_length,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PBFReqQryOrders) Reset()                    { *m = PBFReqQryOrders{} }
func (m *PBFReqQryOrders) String() string            { return proto.CompactTextString(m) }
func (*PBFReqQryOrders) ProtoMessage()               {}
func (*PBFReqQryOrders) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *PBFReqQryOrders) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFReqQryOrders) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFReqQryOrders) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFReqQryOrders) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *PBFReqQryOrders) GetOrderStatus() int32 {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return 0
}

func (m *PBFReqQryOrders) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

func (m *PBFReqQryOrders) GetPageLength() int32 {
	if m != nil && m.PageLength != nil {
		return *m.PageLength
	}
	return 0
}

// 批量查询单据回应
type PBFRspQryOrders struct {
	Rsp              *RspInfo        `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	Orders           []*PBFOrderInfo `protobuf:"bytes,2,rep,name=orders" json:"orders,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PBFRspQryOrders) Reset()                    { *m = PBFRspQryOrders{} }
func (m *PBFRspQryOrders) String() string            { return proto.CompactTextString(m) }
func (*PBFRspQryOrders) ProtoMessage()               {}
func (*PBFRspQryOrders) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *PBFRspQryOrders) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *PBFRspQryOrders) GetOrders() []*PBFOrderInfo {
	if m != nil {
		return m.Orders
	}
	return nil
}

// 批量撤销单据请求
type PBFReqCancelOrders struct {
	Exchange         []byte `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte `protobuf:"bytes,3,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	OrderId          []byte `protobuf:"bytes,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PBFReqCancelOrders) Reset()                    { *m = PBFReqCancelOrders{} }
func (m *PBFReqCancelOrders) String() string            { return proto.CompactTextString(m) }
func (*PBFReqCancelOrders) ProtoMessage()               {}
func (*PBFReqCancelOrders) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *PBFReqCancelOrders) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFReqCancelOrders) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFReqCancelOrders) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFReqCancelOrders) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

// 批量撤销单据回应
type PBFRspCancelOrders struct {
	Rsp              *RspInfo `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	Exchange         []byte   `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte   `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	ContractType     []byte   `protobuf:"bytes,4,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	Success          [][]byte `protobuf:"bytes,5,rep,name=success" json:"success,omitempty"`
	Errors           [][]byte `protobuf:"bytes,6,rep,name=errors" json:"errors,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFRspCancelOrders) Reset()                    { *m = PBFRspCancelOrders{} }
func (m *PBFRspCancelOrders) String() string            { return proto.CompactTextString(m) }
func (*PBFRspCancelOrders) ProtoMessage()               {}
func (*PBFRspCancelOrders) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *PBFRspCancelOrders) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *PBFRspCancelOrders) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFRspCancelOrders) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFRspCancelOrders) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PBFRspCancelOrders) GetSuccess() [][]byte {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *PBFRspCancelOrders) GetErrors() [][]byte {
	if m != nil {
		return m.Errors
	}
	return nil
}

// 在现货和合约账号划转资金请求
type PBFReqTransferMoney struct {
	Exchange         []byte   `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Symbol           []byte   `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	TransType        *int32   `protobuf:"varint,3,opt,name=trans_type,json=transType" json:"trans_type,omitempty"`
	Amount           *float32 `protobuf:"fixed32,4,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFReqTransferMoney) Reset()                    { *m = PBFReqTransferMoney{} }
func (m *PBFReqTransferMoney) String() string            { return proto.CompactTextString(m) }
func (*PBFReqTransferMoney) ProtoMessage()               {}
func (*PBFReqTransferMoney) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *PBFReqTransferMoney) GetExchange() []byte {
	if m != nil {
		return m.Exchange
	}
	return nil
}

func (m *PBFReqTransferMoney) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *PBFReqTransferMoney) GetTransType() int32 {
	if m != nil && m.TransType != nil {
		return *m.TransType
	}
	return 0
}

func (m *PBFReqTransferMoney) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// 在现货和合约账号划转资金回应
type PBFRspTransferMoney struct {
	Rsp              *RspInfo `protobuf:"bytes,1,opt,name=rsp" json:"rsp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PBFRspTransferMoney) Reset()                    { *m = PBFRspTransferMoney{} }
func (m *PBFRspTransferMoney) String() string            { return proto.CompactTextString(m) }
func (*PBFRspTransferMoney) ProtoMessage()               {}
func (*PBFRspTransferMoney) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *PBFRspTransferMoney) GetRsp() *RspInfo {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func init() {
	proto.RegisterType((*PBFContractMoneyInfo)(nil), "PBFContractMoneyInfo")
	proto.RegisterType((*PBFMoneyInfo)(nil), "PBFMoneyInfo")
	proto.RegisterType((*PBFContractPosInfo)(nil), "PBFContractPosInfo")
	proto.RegisterType((*PBFOrderInfo)(nil), "PBFOrderInfo")
	proto.RegisterType((*RspInfo)(nil), "RspInfo")
	proto.RegisterType((*PBFReqQryMoneyInfo)(nil), "PBFReqQryMoneyInfo")
	proto.RegisterType((*PBFRspQryMoneyInfo)(nil), "PBFRspQryMoneyInfo")
	proto.RegisterType((*PBFReqQryPosInfo)(nil), "PBFReqQryPosInfo")
	proto.RegisterType((*PBFRspQryPosInfo)(nil), "PBFRspQryPosInfo")
	proto.RegisterType((*PBFReqSetOrder)(nil), "PBFReqSetOrder")
	proto.RegisterType((*PBFRspSetOrder)(nil), "PBFRspSetOrder")
	proto.RegisterType((*PBFReqQryOrders)(nil), "PBFReqQryOrders")
	proto.RegisterType((*PBFRspQryOrders)(nil), "PBFRspQryOrders")
	proto.RegisterType((*PBFReqCancelOrders)(nil), "PBFReqCancelOrders")
	proto.RegisterType((*PBFRspCancelOrders)(nil), "PBFRspCancelOrders")
	proto.RegisterType((*PBFReqTransferMoney)(nil), "PBFReqTransferMoney")
	proto.RegisterType((*PBFRspTransferMoney)(nil), "PBFRspTransferMoney")
}

func init() { proto.RegisterFile("trade.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0x23, 0x45,
	0x10, 0xd6, 0xf8, 0xed, 0x1a, 0xc7, 0x09, 0x93, 0x87, 0x26, 0x0b, 0x11, 0xd9, 0x61, 0x77, 0x95,
	0x93, 0x15, 0xc2, 0x2f, 0x48, 0x82, 0x22, 0x45, 0xda, 0x85, 0x30, 0xc9, 0x89, 0xcb, 0xd0, 0x9e,
	0x69, 0x3b, 0x16, 0xe3, 0xe9, 0xa1, 0xbb, 0x27, 0xc2, 0x9c, 0x38, 0x72, 0xe1, 0xc2, 0x91, 0x13,
	0x7f, 0x03, 0xf1, 0x97, 0x38, 0x72, 0xe1, 0x86, 0xba, 0xba, 0x7b, 0x1e, 0x76, 0xb2, 0x07, 0xa4,
	0x55, 0x6e, 0x53, 0x8f, 0xae, 0xae, 0xfa, 0xbe, 0xaa, 0x6a, 0x1b, 0x5c, 0xc9, 0x49, 0x42, 0x27,
	0x39, 0x67, 0x92, 0x05, 0xff, 0x38, 0xb0, 0x77, 0x73, 0x71, 0x75, 0xc9, 0x32, 0xc9, 0x49, 0x2c,
	0xdf, 0xb1, 0x8c, 0xae, 0xae, 0xb3, 0x19, 0xf3, 0x3e, 0x83, 0xad, 0xd8, 0x28, 0x23, 0xb9, 0xca,
	0xa9, 0xef, 0x1c, 0x3b, 0x27, 0xa3, 0x70, 0x64, 0x95, 0x77, 0xab, 0x9c, 0x7a, 0x07, 0xd0, 0x9b,
	0x71, 0x4a, 0x7f, 0xa2, 0x7e, 0xeb, 0xd8, 0x39, 0x69, 0x85, 0x46, 0xf2, 0x7c, 0xe8, 0x4f, 0x49,
	0x4a, 0xb2, 0x98, 0xfa, 0x6d, 0x34, 0x58, 0xd1, 0xfb, 0x14, 0xdc, 0x32, 0xec, 0x22, 0xf1, 0x3b,
	0x18, 0x14, 0xac, 0xea, 0x3a, 0xf1, 0x3e, 0x81, 0x21, 0x79, 0x20, 0x8b, 0x94, 0x4c, 0x53, 0xea,
	0x77, 0xf1, 0x70, 0xa5, 0x50, 0x17, 0xe6, 0x9c, 0xcd, 0x16, 0xd2, 0xef, 0xe9, 0x0b, 0xb5, 0xe4,
	0xbd, 0x80, 0x41, 0x91, 0x19, 0x4b, 0x1f, 0x2d, 0xa5, 0xec, 0x79, 0xd0, 0x99, 0xb2, 0x2c, 0xf1,
	0x07, 0xa8, 0xc7, 0xef, 0xe0, 0x57, 0x07, 0x46, 0x37, 0x17, 0x57, 0x55, 0xb9, 0x07, 0xd0, 0x13,
	0xab, 0xe5, 0x94, 0xa5, 0xa6, 0x4e, 0x23, 0xd5, 0x2b, 0x69, 0x35, 0x2b, 0x39, 0x80, 0x1e, 0x5f,
	0xcc, 0xef, 0xa5, 0x30, 0x25, 0x1a, 0xc9, 0xfb, 0x02, 0x86, 0xb6, 0x1c, 0xe1, 0x77, 0x8e, 0xdb,
	0x27, 0xee, 0xd9, 0xfe, 0xe4, 0x31, 0x88, 0xc3, 0xca, 0x2f, 0xf8, 0xad, 0x07, 0x5e, 0xcd, 0xe7,
	0x86, 0x09, 0xcc, 0xea, 0x08, 0x60, 0x5a, 0xac, 0x22, 0xb2, 0x64, 0x45, 0x26, 0x31, 0xb3, 0x56,
	0x38, 0x9c, 0x16, 0xab, 0x73, 0x54, 0x28, 0x8e, 0xd0, 0x5c, 0xe2, 0xa5, 0x53, 0x1c, 0x29, 0x8f,
	0x12, 0xb2, 0x43, 0x18, 0x28, 0x27, 0x84, 0xc0, 0x92, 0x51, 0xac, 0x2e, 0x58, 0x96, 0xd8, 0xf3,
	0xb3, 0x94, 0xc8, 0x9c, 0x2f, 0x62, 0x8a, 0x74, 0xe8, 0xf3, 0x57, 0x56, 0xe7, 0x9d, 0xc2, 0x9e,
	0x72, 0xd2, 0x60, 0x46, 0x29, 0x13, 0x82, 0x13, 0xb9, 0x60, 0x86, 0x1b, 0x6f, 0x5a, 0xac, 0x6e,
	0xd0, 0xf4, 0xd6, 0x5a, 0xbc, 0x40, 0x87, 0xc5, 0xe3, 0x11, 0x79, 0x98, 0x1b, 0xae, 0x5c, 0x74,
	0x5d, 0xc4, 0xf4, 0xfc, 0x61, 0xee, 0xbd, 0x82, 0x71, 0xe5, 0x13, 0x33, 0x61, 0x69, 0x1b, 0x59,
	0xa7, 0x4b, 0x26, 0xa4, 0xf7, 0x06, 0xb6, 0x6b, 0x77, 0x73, 0x4a, 0x52, 0xc3, 0xe2, 0x56, 0x79,
	0x6d, 0x48, 0x49, 0xba, 0xde, 0x55, 0xc3, 0x8d, 0xae, 0xda, 0xe8, 0x66, 0x78, 0xa4, 0x9b, 0x55,
	0x14, 0x4e, 0x89, 0xa4, 0x51, 0x42, 0x24, 0xf5, 0x5d, 0x13, 0x05, 0x55, 0x5f, 0x12, 0x89, 0x0e,
	0x82, 0xa6, 0xa9, 0xe5, 0x63, 0x84, 0xa9, 0x80, 0x52, 0x19, 0x42, 0x5e, 0xc3, 0x58, 0x3b, 0x94,
	0x8c, 0x6c, 0xe9, 0x74, 0xd1, 0xa7, 0xa4, 0xe4, 0x63, 0x18, 0xa2, 0x1b, 0x72, 0x32, 0xd6, 0xed,
	0xaa, 0x14, 0x48, 0x8a, 0x8d, 0x51, 0xb1, 0xb2, 0x5d, 0xc5, 0xa8, 0x68, 0x39, 0x83, 0x7d, 0x74,
	0xdb, 0xe0, 0x65, 0x07, 0xbd, 0x77, 0x95, 0x71, 0x9d, 0x98, 0x57, 0x26, 0x74, 0xc5, 0xcc, 0x47,
	0x1a, 0x74, 0xed, 0x6c, 0xa8, 0x79, 0x03, 0xdb, 0x35, 0x2f, 0xe4, 0xc6, 0xab, 0x32, 0xa8, 0xc8,
	0x39, 0x81, 0x9d, 0x7a, 0x06, 0xc8, 0xce, 0x2e, 0x3a, 0x8e, 0xab, 0xcb, 0x91, 0x9e, 0x6a, 0xb8,
	0xf6, 0x1a, 0xc3, 0x75, 0x04, 0x90, 0xd2, 0x07, 0xca, 0x23, 0xae, 0xf0, 0xde, 0x3f, 0x76, 0x4e,
	0xba, 0xe1, 0x10, 0x35, 0x21, 0x91, 0x34, 0xf8, 0xbd, 0x8d, 0x43, 0xfa, 0x35, 0x4f, 0x28, 0xb7,
	0x43, 0xda, 0x18, 0x05, 0x23, 0x35, 0xd8, 0xcd, 0xc8, 0x52, 0xcf, 0x41, 0x8d, 0xdd, 0xaf, 0xc8,
	0x92, 0x36, 0x9c, 0x90, 0xdf, 0x76, 0xd3, 0xc9, 0x32, 0x9c, 0x50, 0x52, 0x32, 0xac, 0xe7, 0x01,
	0x94, 0xca, 0x30, 0xbc, 0x03, 0xed, 0x19, 0xb5, 0x8b, 0x49, 0x7d, 0xaa, 0xf9, 0x62, 0x2a, 0x43,
	0xd5, 0x78, 0x3d, 0x0c, 0xd9, 0x47, 0xf9, 0x3a, 0xf1, 0xf6, 0xa0, 0xab, 0x19, 0xd4, 0xbd, 0xad,
	0x05, 0xc5, 0x7e, 0x45, 0x80, 0x6e, 0xe7, 0x41, 0x6e, 0xc1, 0x57, 0x50, 0x49, 0x22, 0x0b, 0x81,
	0x4d, 0xdc, 0x0d, 0x8d, 0x54, 0x83, 0x10, 0x1a, 0x10, 0x7a, 0xd0, 0xc1, 0x7e, 0x76, 0xd1, 0x1b,
	0xbf, 0x55, 0x11, 0x45, 0xb6, 0x90, 0x6b, 0x6d, 0xaa, 0x54, 0xa6, 0x88, 0x26, 0xee, 0x5b, 0x6b,
	0xb8, 0x6f, 0x0e, 0xcb, 0x78, 0x73, 0x58, 0x82, 0x73, 0xe8, 0x87, 0x22, 0x47, 0x5a, 0x0e, 0x61,
	0x40, 0x39, 0x67, 0x88, 0x80, 0x83, 0xc1, 0xfa, 0x28, 0x5f, 0x27, 0xaa, 0x56, 0x6d, 0x5a, 0x8a,
	0xb9, 0x61, 0x45, 0xfb, 0xbe, 0x13, 0xf3, 0xe0, 0x14, 0x77, 0x5e, 0x48, 0x7f, 0xf8, 0x86, 0xaf,
	0xaa, 0x4d, 0xfc, 0x02, 0x06, 0xf4, 0xc7, 0xf8, 0x9e, 0x64, 0x73, 0xfb, 0xe6, 0x94, 0x72, 0xf0,
	0x9d, 0x3e, 0x21, 0xf2, 0xb5, 0x13, 0x6d, 0x2e, 0x72, 0x74, 0x76, 0xcf, 0x06, 0x13, 0x93, 0x56,
	0xa8, 0x94, 0xde, 0x04, 0xdc, 0xa5, 0x72, 0x8c, 0x16, 0xd9, 0x8c, 0x09, 0xbf, 0x85, 0xfb, 0x78,
	0x6b, 0x52, 0xdf, 0xfd, 0x21, 0x2c, 0xed, 0xa7, 0x08, 0xbe, 0x87, 0x9d, 0x32, 0x27, 0xbb, 0x85,
	0xdf, 0x93, 0x51, 0x8d, 0x97, 0x56, 0x83, 0x97, 0x0d, 0x0c, 0xdb, 0x8f, 0x60, 0xf8, 0xa7, 0xa3,
	0x6f, 0xc3, 0x7a, 0xaa, 0xdb, 0x9e, 0xae, 0xa6, 0x9e, 0x49, 0xeb, 0xc9, 0x4c, 0xda, 0xef, 0xcf,
	0xa4, 0xf3, 0xc8, 0xea, 0x3b, 0x85, 0x61, 0xce, 0x84, 0x01, 0xa9, 0x8b, 0x20, 0xed, 0x4e, 0x36,
	0x1f, 0xa4, 0x70, 0x90, 0xeb, 0x0f, 0x11, 0xfc, 0xeb, 0xc0, 0x58, 0x23, 0x75, 0x4b, 0x25, 0x8e,
	0xe8, 0x07, 0xc3, 0xa9, 0x9a, 0xa3, 0x4e, 0x7d, 0x8e, 0xaa, 0x6d, 0xd0, 0xd5, 0xa3, 0x42, 0xca,
	0xee, 0xd6, 0x03, 0x89, 0xf1, 0x7a, 0xba, 0xbb, 0x51, 0x83, 0xc1, 0x0e, 0x41, 0x4f, 0x5b, 0x64,
	0xde, 0x9c, 0x6e, 0xd8, 0x47, 0xf9, 0x56, 0xaa, 0x7b, 0xd4, 0x14, 0xe8, 0x47, 0xa6, 0x1b, 0x6a,
	0x41, 0x8d, 0xfc, 0x03, 0x4b, 0x71, 0x1e, 0x5b, 0xa1, 0xfa, 0x0c, 0xfe, 0x30, 0xb5, 0x8b, 0xbc,
	0x56, 0xfb, 0x33, 0xb0, 0x56, 0x5f, 0x3d, 0xdd, 0xc6, 0xea, 0x09, 0xfe, 0x76, 0x60, 0xbb, 0x6c,
	0x64, 0x4c, 0x51, 0x7c, 0x38, 0x7e, 0xea, 0x79, 0x74, 0x9a, 0x2b, 0xf0, 0x25, 0x8c, 0xb4, 0xc9,
	0x6c, 0x35, 0x4d, 0x95, 0x8b, 0xba, 0x5b, 0xbd, 0xda, 0x5e, 0xc2, 0x28, 0x2e, 0x38, 0xa7, 0x99,
	0x8c, 0x72, 0x32, 0xb7, 0x8c, 0xb9, 0x46, 0x77, 0x43, 0xe6, 0xb8, 0xd1, 0x94, 0x29, 0x4a, 0x69,
	0x36, 0x97, 0xf7, 0x86, 0x36, 0x50, 0xaa, 0xb7, 0xa8, 0x09, 0xee, 0x74, 0xb5, 0x38, 0x48, 0x65,
	0xb5, 0x4f, 0x33, 0xf2, 0x1a, 0x7a, 0x98, 0x41, 0x63, 0x21, 0x94, 0xef, 0x4c, 0x68, 0x8c, 0xc1,
	0x2f, 0x8e, 0xdd, 0x50, 0x97, 0xea, 0x27, 0x5f, 0xfa, 0x7c, 0x38, 0x06, 0x7f, 0x39, 0x76, 0xf5,
	0xad, 0xa5, 0xf2, 0x0c, 0x6d, 0xe7, 0x43, 0x5f, 0x14, 0x71, 0x4c, 0x85, 0x5e, 0x15, 0xa3, 0xd0,
	0x8a, 0x2a, 0x2c, 0x6e, 0x77, 0xe1, 0xf7, 0xd0, 0x60, 0xa4, 0xe0, 0x67, 0x07, 0x76, 0x35, 0x90,
	0x77, 0x9c, 0x64, 0x62, 0x46, 0x39, 0x6e, 0xdf, 0xff, 0x85, 0xe4, 0x11, 0x80, 0x54, 0x41, 0x2a,
	0x18, 0xbb, 0xe1, 0x10, 0x35, 0xf6, 0x2f, 0x49, 0xe3, 0xf1, 0x36, 0x52, 0xf0, 0xb9, 0xce, 0x40,
	0xe4, 0xeb, 0x19, 0x3c, 0x09, 0xe0, 0x05, 0x7c, 0x3b, 0xc0, 0x3f, 0x49, 0x31, 0x4b, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xda, 0x6a, 0xfd, 0xab, 0x35, 0x0d, 0x00, 0x00,
}
